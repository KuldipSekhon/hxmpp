package tls.utils.math;

extern class BigInteger {
	var a : Array<Dynamic>;
	var s : Int;
	var t : Int;
	function new(?p0 : Dynamic, ?p1 : Int) : Void;
	function abs() : BigInteger;
	function add(p0 : BigInteger) : BigInteger;
	function am(p0 : Int, p1 : Int, p2 : BigInteger, p3 : Int, p4 : Int, p5 : Int) : Int;
	function and(p0 : BigInteger) : BigInteger;
	function andNot(p0 : BigInteger) : BigInteger;
	function bitCount() : Int;
	function bitLength() : Int;
	function byteValue() : Int;
	function clamp() : Void;
	function clearBit(p0 : Int) : BigInteger;
	function clone() : BigInteger;
	function compareTo(p0 : BigInteger) : Int;
	function copyTo(p0 : BigInteger) : Void;
	function dAddOffset(p0 : Int, p1 : Int) : Void;
	function dMultiply(p0 : Int) : Void;
	function dispose() : Void;
	function divRemTo(p0 : BigInteger, ?p1 : BigInteger, ?p2 : BigInteger) : Void;
	function divide(p0 : BigInteger) : BigInteger;
	function divideAndRemainder(p0 : BigInteger) : Array<Dynamic>;
	function dlShiftTo(p0 : Int, p1 : BigInteger) : Void;
	function drShiftTo(p0 : Int, p1 : BigInteger) : Void;
	function equals(p0 : BigInteger) : Bool;
	function exp(p0 : Int, p1 : IReduction) : BigInteger;
	function flipBit(p0 : Int) : BigInteger;
	function fromArray(p0 : flash.utils.ByteArray, p1 : Int) : Void;
	function fromInt(p0 : Int) : Void;
	function gcd(p0 : BigInteger) : BigInteger;
	function getLowestSetBit() : Int;
	function intAt(p0 : String, p1 : Int) : Int;
	function intValue() : Int;
	function invDigit() : Int;
	function isEven() : Bool;
	function isProbablePrime(p0 : Int) : Bool;
	function lShiftTo(p0 : Int, p1 : BigInteger) : Void;
	function max(p0 : BigInteger) : BigInteger;
	function min(p0 : BigInteger) : BigInteger;
	function mod(p0 : BigInteger) : BigInteger;
	function modInverse(p0 : BigInteger) : BigInteger;
	function modPow(p0 : BigInteger, p1 : BigInteger) : BigInteger;
	function modPowInt(p0 : Int, p1 : BigInteger) : BigInteger;
	function multiply(p0 : BigInteger) : BigInteger;
	function multiplyLowerTo(p0 : BigInteger, p1 : Int, p2 : BigInteger) : Void;
	function multiplyTo(p0 : BigInteger, p1 : BigInteger) : Void;
	function multiplyUpperTo(p0 : BigInteger, p1 : Int, p2 : BigInteger) : Void;
	function nbits(p0 : Int) : Int;
	function negate() : BigInteger;
	function not() : BigInteger;
	function or(p0 : BigInteger) : BigInteger;
	function pow(p0 : Int) : BigInteger;
	function primify(p0 : Int, p1 : Int) : Void;
	function rShiftTo(p0 : Int, p1 : BigInteger) : Void;
	function remainder(p0 : BigInteger) : BigInteger;
	function setBit(p0 : Int) : BigInteger;
	function shiftLeft(p0 : Int) : BigInteger;
	function shiftRight(p0 : Int) : BigInteger;
	function shortValue() : Int;
	function sigNum() : Int;
	function squareTo(p0 : BigInteger) : Void;
	function subTo(p0 : BigInteger, p1 : BigInteger) : Void;
	function subtract(p0 : BigInteger) : BigInteger;
	function testBit(p0 : Int) : Bool;
	function toArray(p0 : flash.utils.ByteArray) : UInt;
	function toByteArray() : flash.utils.ByteArray;
	function toString(?p0 : Float) : String;
	function valueOf() : Float;
	function xor(p0 : BigInteger) : BigInteger;
	private function addTo(p0 : BigInteger, p1 : BigInteger) : Void;
	private function bitwiseTo(p0 : BigInteger, p1 : Dynamic, p2 : BigInteger) : Void;
	private function changeBit(p0 : Int, p1 : Dynamic) : BigInteger;
	private function chunkSize(p0 : Float) : Int;
	private function fromRadix(p0 : String, ?p1 : Int) : Void;
	private function millerRabin(p0 : Int) : Bool;
	private function modInt(p0 : Int) : Int;
	private function nbi() : Dynamic;
	private function toRadix(?p0 : UInt) : String;
	static var BI_FP : Int;
	static var DB : Int;
	static var DM : Int;
	static var DV : Int;
	static var F1 : Int;
	static var F2 : Int;
	static var FV : Float;
	static var ONE : BigInteger;
	static var ZERO : BigInteger;
	static var lowprimes : Array<Dynamic>;
	static var lplim : Int;
	static function nbv(p0 : Int) : BigInteger;
}
